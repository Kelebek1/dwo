#include <intrin.h>
#include <filesystem>
#include <fstream>
#include <span>
#include <stdio.h>

int SSEAndAVXSupportLevel = 2;

__declspec(align(64)) int dword_143128F50[11][21] = {
	{5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  },
	{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3,  },
	{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3,  },
	{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  },
	{5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, },
	{5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,  },
	{5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,  },
	{5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,  },
	{5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  },
	{5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,  },
	{5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, },
};

int unk_143128680[21] = {
	0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 7, 7,
};

__m128i xmmword_1431286A0 = _mm_set_epi32(4, 4, 4, 4);
__m128i xmmword_1431286B0 = _mm_set_epi32(5, 5, 5, 5);
__m128i xmmword_143399850 = _mm_set_epi32(1, 1, 1, 1);

__int64 GetFrameSize(int a1, unsigned int* a2, int* out_frame_size)
{
	int v3; // r9d
	int v6; // edx
	int v7; // eax
	__m128i v8; // xmm2
	__m128i v9; // xmm6
	__m128i v10; // xmm5
	__m128i v11; // xmm1
	__m128i v12; // xmm5
	__m128i v13; // xmm1
	__m128i v14; // xmm1
	__m128i v15; // xmm5
	int* v16; // r8
	__int64 v17; // r10
	int* v18; // r11
	int v19; // edx
	int v20; // ecx
	__m128i v21; // xmm0
	__m128i v22; // xmm2
	__m128i v23; // xmm1
	__m128i v24; // xmm4
	__m128i v25; // xmm1
	__m128i v26; // xmm1
	__m128i v27; // xmm4
	int* v28; // r8
	__int64 v29; // r11
	int* v30; // r10
	int v31; // edx
	int v32; // ecx
	__int64 result; // rax


	v3 = 0;
	v6 = 8;
	v7 = 8
		* (dword_143128F50[a1][0]
			+ dword_143128F50[a1][7]
			+ dword_143128F50[a1][6]
			+ dword_143128F50[a1][5]
			+ dword_143128F50[a1][4]
			+ dword_143128F50[a1][3]
			+ dword_143128F50[a1][1]
			+ dword_143128F50[a1][2]);
	if (a1 > 5)
	{
		if (SSEAndAVXSupportLevel >= 2)
		{
			v6 = 16;
			v21 = _mm_cvtsi32_si128(3u);
			v22 = _mm_loadu_si128((__m128i*) & dword_143128F50[a1][8]);
			v23 = _mm_loadu_si128((__m128i*) & dword_143128F50[a1][12]);
			v24 = _mm_add_epi32(_mm_mullo_epi32(v23, xmmword_1431286B0), _mm_mullo_epi32(v22, xmmword_1431286A0));
			v25 = _mm_add_epi32(_mm_sll_epi32(v23, v21), _mm_sll_epi32(v22, v21));
			v26 = _mm_add_epi32(v25, _mm_srli_si128(v25, 8));
			v27 = _mm_add_epi32(v24, _mm_srli_si128(v24, 8));
			v7 += _mm_cvtsi128_si32(_mm_add_epi32(v26, _mm_srli_si128(v26, 4)));
			v3 = _mm_cvtsi128_si32(_mm_add_epi32(v27, _mm_srli_si128(v27, 4)));
		}
		v28 = &unk_143128680[v6];
		v29 = (21 - v6);
		v30 = &dword_143128F50[a1][v6];
		do
		{
			v31 = *v30++;
			v32 = *v28++ * v31;
			v7 += 8 * v31;
			v3 += v32;
			--v29;
		} while (v29);
	}
	else
	{
		v7 += 0x68;
		if (SSEAndAVXSupportLevel >= 2)
		{
			v6 = 16;
			v8 = _mm_cvtsi32_si128(2u);
			v9 = _mm_loadu_si128((__m128i*) & dword_143128F50[a1][8]);
			v10 = _mm_loadu_si128((__m128i*) & dword_143128F50[a1][12]);
			v11 = _mm_sub_epi32(v10, xmmword_143399850);
			v12 = _mm_add_epi32(_mm_mullo_epi32(v10, xmmword_1431286B0), _mm_mullo_epi32(v9, xmmword_1431286A0));
			v13 = _mm_add_epi32(_mm_sll_epi32(v11, v8), _mm_sll_epi32(_mm_sub_epi32(v9, xmmword_143399850), v8));
			v14 = _mm_add_epi32(v13, _mm_srli_si128(v13, 8));
			v15 = _mm_add_epi32(v12, _mm_srli_si128(v12, 8));
			v7 += _mm_cvtsi128_si32(_mm_add_epi32(v14, _mm_srli_si128(v14, 4)));
			v3 = _mm_cvtsi128_si32(_mm_add_epi32(v15, _mm_srli_si128(v15, 4)));
		}
		v16 = &unk_143128680[v6];
		v17 = (21 - v6);
		v18 = &dword_143128F50[a1][v6];
		do
		{
			v19 = *v18;
			v20 = *v16++;
			v7 = v7 + 4 * v19 - 4;
			v3 += v19 * v20;
			--v17;
		} while (v17);
	}
	result = (v7 + 7) >> 3;
	*out_frame_size = result;
	*a2 = (v3 + 7) >> 3;
	return result;
}

int dword_14312A2F0[] = { 0, 0, 0, 2, 2, 2, 4, 3, 2, 1, 0, 0 };

int dword_143128EE0[21] = {
	0, 5, 0x0A, 0x0F, 0x14, 0x19, 0x1E, 0x23, 0x28, 0x32, 0x3C, 0x46, 0x50, 0x64, 0x78, 0x8C, 0x0AA, 0x0C8, 0x0F0, 0x12C, 0x186
};

__int64 Read_Ka1aFrame(char* frame_p, float* out_p, unsigned int a3, __int64 a4, int a5)
{
	float v5; // xmm6_4
	char* v6; // rcx
	char* v8; // r12
	__int64 v9; // rdx MAPDST
	__int64 v10; // r15 MAPDST
	__int64 v11; // r13 MAPDST
	__m128i v12; // xmm2
	__m128i v13; // xmm1
	__int64 v14; // r14
	float* v15; // rdi
	char v17; // cl
	float v18; // xmm12_4
	float v19; // xmm8_4
	float v20; // xmm0_4
	float v21; // xmm0_4
	float* v22; // rdi
	char v24; // cl
	float v25; // xmm12_4
	float v26; // xmm0_4
	float v27; // xmm0_4
	float* v28; // rdi
	char v30; // cl
	float v31; // xmm12_4
	float v32; // xmm0_4
	float v33; // xmm0_4
	float* v34; // rdi
	__int64 v35; // rsi
	char v36; // cl
	float v37; // xmm12_4
	float v38; // xmm0_4
	float v39; // xmm0_4
	float* v40; // rdi
	__int64 v41; // rsi
	char v42; // cl
	float v43; // xmm12_4
	float v44; // xmm0_4
	float v45; // xmm0_4
	float* v46; // rdi
	__int64 v47; // rsi
	char v48; // cl
	float v49; // xmm12_4
	float v50; // xmm0_4
	float v51; // xmm0_4
	float* v52; // rdi
	__int64 v53; // rsi
	char v54; // cl
	float v55; // xmm8_4
	float v56; // xmm0_4
	float v57; // xmm0_4
	float* v58; // rbx
	__int64 v59; // rdi
	char v60; // cl
	float v61; // xmm8_4
	float v62; // xmm0_4
	float v63; // xmm0_4
	__int64 v64; // rdi
	unsigned int v65; // r10d
	__int64 v66; // r15
	__int64 v67; // rcx
	bool v68; // si
	char* v69; // r11
	int v70; // r13d
	unsigned int v71; // ebx
	char* v72; // rdx
	unsigned int v73; // r9d
	float v74; // xmm8_4
	char v75; // dl
	float v76; // xmm1_4
	float v77; // xmm0_4
	float v78; // xmm0_4
	int v79; // eax
	__int64 result; // rax
	__int64 v81; // rbx
	unsigned int v82; // r9d
	char* v83; // rdx
	unsigned int v84; // r11d
	unsigned __int8 v85; // cl
	int v86; // eax
	unsigned __int8 v87; // al
	unsigned __int8 v88; // cl
	bool v89; // zf
	char* v90; // r11
	int v91; // r13d
	char* v92; // rdx
	unsigned int v93; // ebx
	unsigned int v94; // r9d
	unsigned int v95; // esi
	float v96; // xmm8_4
	char v97; // dl
	float v98; // xmm0_4
	float v99; // xmm0_4
	float v100; // xmm0_4
	__int64 v101; // r9
	unsigned int v102; // esi
	unsigned int v103; // ebx
	char v104; // cl
	float v105; // xmm8_4
	float v106; // xmm0_4
	float v107; // xmm0_4
	float v108; // xmm0_4
	unsigned int a1; // [rsp+20h] [rbp-E0h]
	__int64 a1a; // [rsp+20h] [rbp-E0h]
	unsigned int v111; // [rsp+28h] [rbp-D8h]
	unsigned int v112; // [rsp+30h] [rbp-D0h]
	unsigned int v113; // [rsp+30h] [rbp-D0h]
	__int64 v114; // [rsp+30h] [rbp-D0h]
	__int64 v115; // [rsp+30h] [rbp-D0h]
	unsigned int v116; // [rsp+38h] [rbp-C8h]
	__int64 v117; // [rsp+38h] [rbp-C8h]
	char* v118; // [rsp+40h] [rbp-C0h]
	unsigned int v119; // [rsp+48h] [rbp-B8h]
	__int64 v120; // [rsp+48h] [rbp-B8h]
	int v122[21]; // [rsp+60h] [rbp-A0h]

	std::span<char> frame_s(frame_p, 0x1000);

	v5 = *(float*)frame_p;
	v6 = frame_p + 4;
	v8 = &v6[a3];
	v118 = v6;
	v9 = dword_143128F50[a5][0];
	v10 = dword_143128F50[a5][1];
	v11 = dword_143128F50[a5][2];
	v111 = dword_143128F50[a5][3];
	v122[3] = v111;
	v116 = dword_143128F50[a5][4];
	v122[4] = v116;
	a1 = dword_143128F50[a5][5];
	v122[5] = a1;
	v119 = dword_143128F50[a5][6];
	v122[6] = v119;
	v112 = dword_143128F50[a5][7];
	v122[7] = v112;
	v122[8] = dword_143128F50[a5][8];
	v122[9] = dword_143128F50[a5][9];
	v122[10] = dword_143128F50[a5][0xA];
	v122[11] = dword_143128F50[a5][0xB];
	v122[12] = dword_143128F50[a5][0xC];
	v122[13] = dword_143128F50[a5][0xD];
	v122[14] = dword_143128F50[a5][0xE];
	v122[15] = dword_143128F50[a5][0xF];
	v122[16] = dword_143128F50[a5][0x10];
	v122[17] = dword_143128F50[a5][0x11];
	v122[18] = dword_143128F50[a5][0x12];
	v122[19] = dword_143128F50[a5][0x13];
	v122[20] = dword_143128F50[a5][0x14];
	v122[0] = v9;
	v122[1] = v10;
	v122[2] = v11;
	if (v5 < 0.0)
	{
		v5 = -v5;
		v12 = _mm_shuffle_epi32(_mm_cvtsi32_si128(dword_14312A2F0[a5]), 0);
		v13 = _mm_sub_epi32(_mm_loadu_si128((__m128i*) & v122[17]), v12);
		*(__m128i*)& v122[8] = _mm_add_epi32(_mm_loadu_si128((__m128i*) & v122[8]), v12);
		*(__m128i*)& v122[17] = v13;
	}
	v14 = 0LL;
	if (v9)
	{
		v15 = out_p;
		do
		{
			v17 = v8[v14];
			v18 = v5;
			v19 = -v5;
			if (v17)
			{
				v21 = v17;
				if (v17 < 0)
				{
					v21 = -v21;
					v18 = -v5;
				}
				v20 = std::expf((v21 - 127.0) * 0.086643398) * v18;
			}
			else
			{
				v20 = 0.0;
			}
			*v15 = v20;
			v14 = (v14 + 1);
			++v15;
			--v9;
		} while (v9);
	}
	else
	{
		v19 = -v5;
	}
	if (v10)
	{
		v22 = out_p + 5;
		do
		{
			v24 = v8[v14];
			v25 = v5;
			if (v24)
			{
				v27 = v24;
				if (v24 < 0)
				{
					v27 = -v27;
					v25 = -v5;
				}
				v26 = std::expf((v27 - 127.0) * 0.086643398) * v25;
			}
			else
			{
				v26 = 0.0;
			}
			*v22 = v26;
			v14 = (v14 + 1);
			++v22;
			--v10;
		} while (v10);
	}
	if (v11)
	{
		v28 = out_p + 10;
		do
		{
			v30 = v8[v14];
			v31 = v5;
			if (v30)
			{
				v33 = v30;
				if (v30 < 0)
				{
					v33 = -v33;
					v31 = -v5;
				}
				v32 = std::expf((v33 - 127.0) * 0.086643398) * v31;
			}
			else
			{
				v32 = 0.0;
			}
			*v28 = v32;
			v14 = (v14 + 1);
			++v28;
			--v11;
		} while (v11);
	}
	if (v111)
	{
		v34 = out_p + 15;
		v35 = v111;
		do
		{
			v36 = v8[v14];
			v37 = v5;
			if (v36)
			{
				v39 = v36;
				if (v36 < 0)
				{
					v39 = -v39;
					v37 = -v5;
				}
				v38 = std::expf((v39 - 127.0) * 0.086643398) * v37;
			}
			else
			{
				v38 = 0.0;
			}
			*v34 = v38;
			v14 = (v14 + 1);
			++v34;
			--v35;
		} while (v35);
	}
	if (v116)
	{
		v40 = out_p + 20;
		v41 = v116;
		do
		{
			v42 = v8[v14];
			v43 = v5;
			if (v42)
			{
				v45 = v42;
				if (v42 < 0)
				{
					v45 = -v45;
					v43 = v19;
				}
				v44 = std::expf((v45 - 127.0) * 0.086643398) * v43;
			}
			else
			{
				v44 = 0.0;
			}
			*v40 = v44;
			v14 = (v14 + 1);
			++v40;
			--v41;
		} while (v41);
	}
	if (a1)
	{
		v46 = out_p + 25;
		v47 = a1;
		do
		{
			v48 = v8[v14];
			v49 = v5;
			if (v48)
			{
				v51 = v48;
				if (v48 < 0)
				{
					v51 = -v51;
					v49 = v19;
				}
				v50 = std::expf((v51 - 127.0) * 0.086643398) * v49;
			}
			else
			{
				v50 = 0.0;
			}
			*v46 = v50;
			v14 = (v14 + 1);
			++v46;
			--v47;
		} while (v47);
	}
	if (v119)
	{
		v52 = out_p + 30;
		v53 = v119;
		do
		{
			v54 = v8[v14];
			v55 = v5;
			if (v54)
			{
				v57 = v54;
				if (v54 < 0)
				{
					v57 = -v57;
					v55 = -v5;
				}
				v56 = std::expf((v57 - 127.0) * 0.086643398) * v55;
			}
			else
			{
				v56 = 0.0;
			}
			*v52 = v56;
			v14 = (v14 + 1);
			++v52;
			--v53;
		} while (v53);
	}
	if (v112)
	{
		v58 = out_p + 35;
		v59 = v112;
		do
		{
			v60 = v8[v14];
			v61 = v5;
			if (v60)
			{
				v63 = v60;
				if (v60 < 0)
				{
					v63 = -v63;
					v61 = -v5;
				}
				v62 = std::expf((v63 - 127.0) * 0.086643398) * v61;
			}
			else
			{
				v62 = 0.0;
			}
			*v58 = v62;
			v14 = (v14 + 1);
			++v58;
			--v59;
		} while (v59);
	}
	v64 = 0;
	v117 = 13LL;
	v65 = 0;
	v66 = (v14 + 13);
	v67 = 32LL;
	a1a = 32LL;
	if (a5 <= 5)
	{
		v68 = 0;
		while (1)
		{
			v69 = v118;
			v70 = unk_143128680[v67 / sizeof(int)];
			v71 = 0;
			v72 = &v118[v64];
			v73 = v65 + v70;
			v113 = v65 + v70;
			if (v65 + v70 <= 8)
				break;
			if (v73 <= 0x10)
			{
				v71 = (((1 << (8 - v65)) - 1) & (*v72 >> v65)) + ((v72[1] & ((1 << (v73 - 8)) - 1)) << (8 - v65));
				goto LABEL_75;
			}
		LABEL_76:
			v74 = v5;
			v75 = v8[v14];
			if (v75)
			{
				v77 = v75;
				if (v75 < 0)
				{
					v77 = -v77;
					v74 = -v5;
				}
				v78 = std::expf((v77 - 127.0) * 0.086643398);
				v73 = v113;
				v67 = a1a;
				v69 = v118;
				v76 = v78 * v74;
			}
			else
			{
				v76 = 0.0;
			}
			v14 = v14 + 1;
			v65 = v73 - 8;
			v114 = *((int*)((char*)dword_143128EE0 + v67));
			if (v73 < 8) {
				v65 = v73;
			}
			out_p[*((int*)((char*)dword_143128EE0 + v67)) + v71] = v76;
			v79 = v64;
			v64 = v64 + 1;
			if (v73 < 8) {
				v64 = v79;
			}
			result = *(int*)((char*)v122 + v67);;
			if (result > 1)
			{
				v81 = (result - 1);
				do
				{
					v82 = 0;
					v83 = &v69[v64];
					v84 = v65 + v70;
					if (v65 + v70 > 8)
					{
						if (v84 <= 0x10) {
							v82 = (((1 << (8 - v65)) - 1) & (*v83 >> v65)) + ((v83[1] & ((1 << (v84 - 8)) - 1)) << (8 - v65));
						}
					}
					else
					{
						v82 = ((1 << v70) - 1) & (*v83 >> v65);
					}
					v65 += v70;
					v85 = v8[v66];
					v86 = v66 + 1;
					if (!v68) {
						v86 = v66;
					}
					v66 = v86;
					v87 = v85 & 0xF;
					v88 = v85 >> 4;
					if (!v68)
						v88 = v87;
					result = v114 + v82;
					out_p[result] = ((v88 * 0.14285715) - 1.0) * v76;
					if (v84 >= 8)
					{
						v65 = v84 - 8;
						v64 = v64 + 1;
					}
					v69 = v118;
					v68 = !v68;
					--v81;
				} while (v81);
				v67 = a1a;
			}
			v67 += 4LL;
			v89 = v117-- == 1;
			a1a = v67;
			if (v89)
				return result;
		}
		v71 = ((1 << v70) - 1) & (*v72 >> v65);
	LABEL_75:
		v67 = a1a;
		goto LABEL_76;
	}
	v90 = v118;
	do
	{
		v91 = unk_143128680[v67 / sizeof(int)];
		v92 = &v90[v64];
		v93 = 0;
		v94 = v64;
		v95 = v65 + v91;
		if (v65 + v91 > 8)
		{
			if (v95 > 0x10)
				goto LABEL_107;
			v93 = (((1 << (8 - v65)) - 1) & (*v92 >> v65)) + ((v92[1] & ((1 << (v95 - 8)) - 1)) << (8 - v65));
		}
		else
		{
			v93 = ((1 << v91) - 1) & (*v92 >> v65);
		}
		v67 = a1a;
	LABEL_107:
		v96 = v5;
		v97 = v8[v14];
		if (v97)
		{
			v99 = v97;
			if (v97 < 0)
			{
				v99 = -v99;
				v96 = -v5;
			}
			v100 = std::expf((v99 - 127.0) * 0.086643398);
			v67 = a1a;
			v94 = v64;
			v90 = v118;
			v98 = v100 * v96;
		}
		else
		{
			v98 = 0.0;
		}
		v14 = v14 + 1;
		v64 = v94 + 1;
		v65 = v95 - 8;
		v120 = *((int*)((char*)dword_143128EE0 + v67));
		if (v95 < 8)
		{
			v64 = v94;
			v65 = v95;
		}
		out_p[*((int*)((char*)dword_143128EE0 + v67)) + v93] = v98;
		result = *(int*)((char*)v122 + v67);
		if (result > 1)
		{
			v101 = (result - 1);
			v115 = v101;
			do
			{
				v102 = v65 + v91;
				v103 = 0;
				if (v65 + v91 > 8)
				{
					if (v102 <= 0x10)
						v103 = (((1 << (8 - v65)) - 1) & (v90[v64] >> v65))
						+ ((v90[v64 + 1] & ((1 << (v102 - 8)) - 1)) << (8 - v65));
				}
				else
				{
					v103 = ((1 << v91) - 1) & (v90[v64] >> v65);
				}
				v104 = v8[v66];
				v105 = v5;
				if (v104)
				{
					v107 = v104;
					if (v104 < 0)
					{
						v107 = -v107;
						v105 = -v5;
					}
					v108 = std::expf((v107 - 127.0) * 0.086643398);
					v101 = v115;
					v90 = v118;
					v106 = v108 * v105;
				}
				else
				{
					v106 = 0.0;
				}
				v66 = (v66 + 1);
				v65 = v102;
				result = v120 + v103;
				out_p[result] = v106;
				if (v102 >= 8)
				{
					v65 = v102 - 8;
					v64 = (v64 + 1);
				}
				v115 = --v101;
			} while (v101);
			v67 = a1a;
		}
		v67 += 4LL;
		v89 = v117-- == 1;
		a1a = v67;
	} while (!v89);
	return result;
}

void sub_14273E860(unsigned int a1, float* a2, float* a3, float* a4, float* a5)
{
	unsigned int v5; // r10d
	__int64 v7; // rax
	float* v8; // rcx
	float* v9; // rbx
	float* v10; // rsi
	float* v11; // rdi
	float* v12; // rax
	__m128 v13; // xmm3
	__m128 v14; // xmm5
	__m128 v15; // xmm0
	__m128 v16; // xmm3
	__int64 v17; // rax
	float v18; // xmm4_4
	float v19; // xmm5_4
	float v20; // xmm4_4
	float v21; // xmm3_4
	float v22; // xmm4_4
	float v23; // xmm5_4
	float v24; // xmm0_4
	float v25; // xmm3_4
	float v26; // xmm4_4
	float v27; // xmm3_4
	float v28; // xmm5_4
	float v29; // xmm0_4
	float v30; // xmm3_4
	signed __int64 v31; // r9
	signed __int64 v32; // rcx
	signed __int64 v33; // rdx
	__int64 v34; // rax
	float v35; // xmm2_4
	float v36; // xmm3_4

	std::span<float> a2_s(a2, 512);
	std::span<float> a3_s(a3, 512);
	std::span<float> a4_s(a4, 512);
	std::span<float> a5_s(a5, 512);

	v5 = 0;
	if (a1)
	{
		if (a1 < 4)
		{
			v8 = a5;
		}
		else
		{
			v7 = a1 - 1;
			v8 = a5;
			v9 = &a2[v7];
			v10 = &a5[v7];
			if (a2 > v10 || v9 < a5)
			{
				v11 = &a4[v7];
				if (a2 > v11 || v9 < a4)
				{
					v12 = &a3[v7];
					if ((a2 > v12 || v9 < a3) && (a3 > v10 || v12 < a5) && (a3 > v11 || v12 < a4))
					{
						do
						{
							v5 += 4;
							v13 = *(__m128*)v8;
							v8 += 4;
							v14 = *(__m128*)a4;
							a4 += 4;
							v15 = _mm_mul_ps(v13, *(__m128*)a3);
							v16 = _mm_add_ps(_mm_mul_ps(v13, *(__m128*)a2), _mm_mul_ps(v14, *(__m128*)a3));
							*(__m128*)a2 = _mm_sub_ps(_mm_mul_ps(*(__m128*)a2, v14), v15);
							a2 += 4;
							*(__m128*)a3 = v16;
							a3 += 4;
						} while (v5 < (a1 & 0xFFFFFFFC));
					}
				}
			}
		}
		if (v5 < a1)
		{
			if (a1 - v5 >= 4)
			{
				v17 = ((a1 - v5 - 4) >> 2) + 1;
				v5 += 4 * v17;
				do
				{
					v18 = (*v8 * *a2) + (*a4 * *a3);
					*a2 = (*a2 * *a4) - (*v8 * *a3);
					v19 = a3[1];
					*a3 = v18;
					v20 = a4[1];
					v21 = (v8[1] * a2[1]) + (v20 * v19);
					a2[1] = (a2[1] * v20) - (v8[1] * v19);
					v22 = a3[2];
					a3[1] = v21;
					v23 = a4[2];
					v24 = v8[2];
					v25 = (v24 * a2[2]) + (v23 * v22);
					a2[2] = (a2[2] * v23) - (v24 * v22);
					v26 = a3[3];
					a3[2] = v25;
					v27 = v8[3];
					v28 = a4[3];
					v29 = v27;
					a4 += 4;
					v8 += 4;
					v30 = (v27 * a2[3]) + (v28 * v26);
					a2[3] = (a2[3] * v28) - (v29 * v26);
					a2 += 4;
					a3[3] = v30;
					a3 += 4;
					--v17;
				} while (v17);
			}
			if (v5 < a1)
			{
				v31 = a4 - a3;
				v32 = v8 - a3;
				v33 = a2 - a3;
				v34 = a1 - v5;
				do
				{
					v35 = *(a3 + v33);
					v36 = (*(a3 + v32) * v35) + (*(a3 + v31) * *a3);
					*(a3 + v33) = (*(a3 + v31) * v35) - (*(a3 + v32) * *a3);
					*a3++ = v36;
					--v34;
				} while (v34);
			}
		}
	}
}

unsigned __int64 sub_142746230(unsigned int a1, __int64 a2, float* a3, float* a4, float* a5, float* a6)
{
	__int64 v7; // rdx
	unsigned int v8; // r11d
	float* v10; // r8
	unsigned int v11; // edi
	signed __int64 v12; // rbx
	unsigned int v13; // eax
	float v14; // xmm0_4
	float v15; // xmm1_4
	unsigned int v16; // r12d
	unsigned __int64 result; // rax
	float i; // xmm12_4
	unsigned int v19; // r11d
	unsigned int v20; // r14d
	unsigned int v21; // ebp
	unsigned int v22; // edi
	int v23; // edx
	float* v24; // r15
	__int64 v25; // rbx
	signed __int64 v26; // rsi
	unsigned int v27; // eax
	__int64 v28; // rax
	float v29; // xmm0_4
	float v30; // xmm5_4
	float v31; // xmm4_4
	__int64 v32; // r8
	float v33; // xmm0_4
	__int64 v34; // rax
	float v35; // xmm0_4
	float v36; // xmm2_4
	float v37; // xmm3_4
	int v38; // rax
	float v39; // xmm0_4
	float v40; // xmm5_4
	float v41; // xmm4_4
	__int64 v42; // r8
	__int64 v43; // rdx
	__int64 v44; // rax
	float v45; // xmm0_4
	float v46; // xmm3_4
	float v47; // xmm2_4
	int v48; // rax
	float v49; // xmm0_4
	float v50; // xmm5_4
	float v51; // xmm4_4
	__int64 v52; // r8
	__int64 v53; // rdx
	__int64 v54; // rax
	float v55; // xmm0_4
	float v56; // xmm3_4
	float v57; // xmm2_4
	int v58; // rax
	float v59; // xmm5_4
	float v60; // xmm1_4
	float v61; // xmm5_4
	float v62; // xmm4_4
	__int64 v63; // r8
	__int64 v64; // rdx
	bool v65; // zf
	float v66; // xmm0_4
	float v67; // xmm2_4
	float v68; // xmm3_4
	__int64 v69; // rax
	__int64 v70; // rbx
	signed __int64 v71; // rsi
	__int64 v72; // rdi
	float* v73; // r8
	__int64 v74; // rax
	__int64 v75; // rdx
	float v76; // xmm0_4
	float v77; // xmm5_4
	float v78; // xmm4_4
	float v79; // xmm0_4
	float v80; // xmm3_4
	float v81; // xmm1_4
	float v82; // xmm3_4
	float v83; // xmm2_4
	unsigned int v84; // ebp
	unsigned int v85; // r14d
	unsigned int v86; // edx
	__int64 v87; // rcx
	__int64 v88; // rbx
	signed __int64 v89; // rdi
	float* v90; // r8
	__int64 v91; // rsi
	__int64 v92; // rax
	__int64 v93; // rcx
	float v94; // xmm6_4
	float v95; // xmm0_4
	float v96; // xmm5_4
	float v97; // xmm0_4
	__int64 v98; // rax
	float v99; // xmm3_4
	float v100; // xmm1_4
	float v101; // xmm3_4
	float v102; // xmm4_4
	float v103; // xmm2_4
	float v104; // xmm6_4
	float v105; // xmm1_4
	float v106; // xmm4_4
	unsigned int j; // r15d
	unsigned int v108; // ebp
	__int64 v109; // rcx
	__int64 v110; // rax
	float v111; // xmm8_4
	float v112; // xmm10_4
	float v113; // xmm9_4
	float k; // xmm11_4
	unsigned int v115; // edx
	__int64 v116; // rcx
	__int64 v117; // rbx
	signed __int64 v118; // rdi
	float* v119; // r8
	__int64 v120; // rsi
	__int64 v121; // rax
	__int64 v122; // rcx
	float v123; // xmm7_4
	float v124; // xmm0_4
	float v125; // xmm6_4
	float v126; // xmm0_4
	__int64 v127; // rax
	float v128; // xmm4_4
	float v129; // xmm1_4
	float v130; // xmm5_4
	float v131; // xmm4_4
	float v132; // xmm3_4
	float v133; // xmm5_4
	float v134; // xmm2_4
	float v135; // xmm7_4
	unsigned int v136; // r13d
	unsigned int m; // ebp
	unsigned int v138; // edi
	__int64 v139; // r8
	__int64 v140; // rbx
	signed __int64 v141; // r11
	float* v142; // rdx
	unsigned int v143; // eax
	__int64 v144; // rsi
	float v145; // xmm4_4
	__int64 v146; // rax
	float v147; // xmm2_4
	float v148; // xmm0_4
	float v149; // xmm4_4
	__int64 v150; // rax
	float v151; // xmm4_4
	float v152; // xmm0_4
	float v153; // xmm3_4
	float v154; // xmm4_4
	float v155; // xmm4_4
	float v156; // xmm0_4
	float v157; // xmm2_4
	float v158; // xmm4_4
	float v159; // xmm0_4
	float v160; // xmm2_4
	float v161; // xmm1_4
	float* v162; // rdx
	signed __int64 v163; // r11
	float v164; // xmm0_4
	float v165; // xmm2_4
	float v166; // xmm1_4
	int v167; // [rsp+0h] [rbp-E8h]
	unsigned int v168; // [rsp+18h] [rbp-D0h]
	unsigned int v169; // [rsp+1Ch] [rbp-CCh]
	__int64 v170; // [rsp+20h] [rbp-C8h]
	unsigned int v172; // [rsp+F8h] [rbp+10h]

	std::span<float> a3_s(a3, 512);
	std::span<float> a4_s(a4, 512);

	v7 = 0;
	v8 = 1;
	if (a1 - 1 > 1)
	{
		v10 = a4 + 1;
		v11 = a1 >> 1;
		v12 = (__int64)a3 - (__int64)a4;
		do
		{
			v7 = v11 ^ v7;
			v13 = a1 >> 1;
			if (v11 > v7)
			{
				do
				{
					v13 >>= 1;
					v7 = v13 ^ v7;
				} while (v13 > v7);
			}
			if (v8 < v7)
			{
				float* tmp = (float*)((__int64)v10 + v12);
				v14 = *tmp;
				v15 = *v10;
				*tmp = a3[v7];
				*v10 = a4[v7];
				a3[v7] = v14;
				a4[v7] = v15;
			}
			++v8;
			++v10;
		} while (v8 < a1 - 1);
	}
	v16 = 4;
	v167 = 4;
	result = a1 >> 3;
	for (i = a5[result]; v16 <= a1; v167 = v16)
	{
		v19 = v16 >> 2;
		v172 = v16 >> 2;
		v20 = v16 >> 2;
		if (v16 >> 2)
		{
			do
			{
				result = v20 >> 1;
				v21 = v19 - result;
				v22 = v19 - v20;
				v169 = v19 - result;
				if (v19 - v20 < v19 - result)
				{
					result = v21 - v22;
					if (result >= 4)
					{
						v23 = -2 * v19;
						v24 = &a4[v22 + 1];
						v25 = v19 + v22 + 2 * v19;
						v26 = (__int64)a3 - (__int64)a4;
						v27 = ((v21 - v22 - 4) >> 2) + 1;
						v170 = v27;
						v168 = v22 + 4 * v27;
						do
						{
							v28 = (v23 + v25);
							v29 = a3[v28];
							v30 = *(float*)((__int64)v24 + v26 - 4) - v29;
							v31 = *(v24 - 1) - a4[v28];
							v32 = v28;
							*(float*)((__int64)v24 + v26 - 4) = v29 + *(float*)((__int64)v24 + v26 - 4);
							v33 = a4[v28];
							v34 = v25 - v19;
							*(v24 - 1) = v33 + *(v24 - 1);
							v35 = a3[v34];
							v36 = a4[v25] - a4[v34];
							v37 = a3[v25] - v35;
							a3[v34] = v35 + a3[v25];
							a4[v34] = a4[v25] + a4[v34];
							v38 = 1 - 2 * v19 + v25;
							a3[v32] = v30 - v36;
							a4[v32] = v37 + v31;
							a3[v25] = v36 + v30;
							a4[v25] = v31 - v37;
							v39 = a3[v38];
							v40 = *v24 - a4[v38];
							v41 = *(float*)((__int64)v24 + v26) - v39;
							v42 = v38;
							*(float*)((__int64)v24 + v26) = v39 + *(float*)((__int64)v24 + v26);
							v43 = (v25 + 1);
							*v24 = *v24 + a4[v38];
							v44 = v25 + 1 - v19;
							v45 = a3[v44];
							v46 = a3[v43] - v45;
							v47 = a4[v43] - a4[v44];
							a3[v44] = v45 + a3[v43];
							a4[v44] = a4[v44] + a4[v43];
							v48 = 2 - 2 * v19 + v25;
							a3[v42] = v41 - v47;
							a4[v42] = v46 + v40;
							a3[v43] = v47 + v41;
							a4[v43] = v40 - v46;
							v49 = a3[v48];
							v50 = *(float*)((__int64)v24 + v26 + 4) - v49;
							v51 = v24[1] - a4[v48];
							v52 = v48;
							*(float*)((__int64)v24 + v26 + 4) = v49 + *(float*)((__int64)v24 + v26 + 4);
							v53 = (v25 + 2);
							v24[1] = a4[v48] + v24[1];
							v54 = v25 + 2 - v19;
							v55 = a3[v54];
							v56 = a3[v53] - v55;
							v57 = a4[v53] - a4[v54];
							a3[v54] = v55 + a3[v53];
							a4[v54] = a4[v54] + a4[v53];
							v58 = 3 - 2 * v19 + v25;
							a3[v52] = v50 - v57;
							a4[v52] = v56 + v51;
							a3[v53] = v57 + v50;
							a4[v53] = v51 - v56;
							v59 = *(float*)((__int64)v24 + v26 + 8);
							v60 = v59 + a3[v58];
							v61 = v59 - a3[v58];
							v62 = v24[2] - a4[v58];
							v63 = v58;
							*(float*)((__int64)v24 + v26 + 8) = v60;
							v64 = (v25 + 3);
							v24[2] = a4[v58] + v24[2];
							v24 += 4;
							result = v25 + 3 - v19;
							v25 = (v25 + 4);
							v65 = v170-- == 1;
							v66 = a3[result];
							v67 = a4[v64] - a4[result];
							v68 = a3[v64] - v66;
							a3[result] = v66 + a3[v64];
							a4[result] = a4[result] + a4[v64];
							a3[v63] = v61 - v67;
							a4[v63] = v68 + v62;
							a3[v64] = v67 + v61;
							a4[v64] = v62 - v68;
							v23 = -2 * v19;
						} while (!v65);
						v22 = v168;
						v21 = v169;
						v20 = v172;
					}
					if (v22 < v21)
					{
						v69 = v22;
						v70 = v22 + 2 * v19;
						v71 = (__int64)a3 - (__int64)a4;
						v72 = v21 - v22;
						v73 = &a4[v69];
						do
						{
							v74 = v70 - v19;
							v75 = v74;
							v76 = a3[v74];
							v77 = *v73 - a4[v74];
							v78 = *(float*)((__int64)v73 + v71) - v76;
							*(float*)((__int64)v73 + v71) = v76 + *(float*)((__int64)v73 + v71);
							v79 = a4[v74];
							result = v70 + v19;
							*v73 = v79 + *v73;
							++v73;
							v80 = a3[result];
							v81 = v80 + a3[v70];
							v82 = v80 - a3[v70];
							v83 = a4[result] - a4[v70];
							a3[v70] = v81;
							a4[v70] = a4[result] + a4[v70];
							a3[v75] = v78 - v83;
							v70 = (v70 + 1);
							a4[v75] = v82 + v77;
							a3[result] = v83 + v78;
							a4[result] = v77 - v82;
							--v72;
						} while (v72);
					}
				}
				v20 >>= 2;
				v172 = v20;
			} while (v20);
			v16 = v167;
		}
		if (v16 != a1)
		{
			v84 = v19;
			result = a1 >> 1;
			v85 = a1 >> 1;
			if (v19)
			{
				do
				{
					v86 = v16 + v19 - (v84 >> 1);
					v87 = v16 + v19 - v84;
					if (v87 < v86)
					{
						v88 = v87 + 2 * v19;
						v89 = (__int64)a3 - (__int64)a4;
						v90 = &a4[v87];
						v91 = v86 - v87;
						do
						{
							v92 = v88 - v19;
							v93 = v92;
							v94 = *v90 - a4[v92];
							v95 = a3[v92];
							v96 = *(float*)((__int64)v90 + v89) - v95;
							*(float*)((__int64)v90 + v89) = v95 + *(float*)((__int64)v90 + v89);
							v97 = a4[v92];
							v98 = v88 + v19;
							*v90 = v97 + *v90;
							++v90;
							v99 = a3[v98];
							v100 = v99 + a3[v88];
							v101 = v99 - a3[v88];
							v102 = a4[v98] - a4[v88];
							a3[v88] = v100;
							v103 = v101 + v94;
							v104 = v94 - v101;
							v105 = v96 - v102;
							v106 = v102 + v96;
							a4[v88] = a4[v98] + a4[v88];
							v88 = (v88 + 1);
							a3[v93] = (v103 + v105) * i;
							a4[v93] = (v103 - v105) * i;
							a3[v98] = (v104 - v106) * i;
							a4[v98] = (-v104 - v106) * i;
							--v91;
						} while (v91);
					}
					v84 >>= 2;
				} while (v84);
				result = v85;
			}
			for (j = 2 * v16; j < a1; j += v16)
			{
				for (v85 ^= result; result > v85; v85 ^= result) {
					result = result >> 1;
				}
				v108 = v19;
				v109 = v85 >> 2;
				v110 = (3 * v109);
				v111 = -a6[v109];
				v112 = a5[v109];
				v113 = -a6[v110];
				for (k = a5[v110]; v108; v108 >>= 2)
				{
					v115 = v19 + j - (v108 >> 1);
					v116 = v19 + j - v108;
					if (v116 < v115)
					{
						v117 = v116 + 2 * v19;
						v118 = (__int64)a3 - (__int64)a4;
						v119 = &a4[v116];
						v120 = v115 - v116;
						do
						{
							v121 = v117 - v19;
							v122 = v121;
							v123 = *v119 - a4[v121];
							v124 = a3[v121];
							v125 = *(float*)((__int64)v119 + v118) - v124;
							*(float*)((__int64)v119 + v118) = v124 + *(float*)((__int64)v119 + v118);
							v126 = a4[v121];
							v127 = v117 + v19;
							*v119 = v126 + *v119;
							++v119;
							v128 = a3[v127];
							v129 = v128 + a3[v117];
							v130 = a4[v127] - a4[v117];
							v131 = v128 - a3[v117];
							a3[v117] = v129;
							v132 = v125 - v130;
							v133 = v130 + v125;
							v134 = v131 + v123;
							v135 = v123 - v131;
							a4[v117] = a4[v127] + a4[v117];
							v117 = (v117 + 1);
							a3[v122] = (v132 * v112) - (v134 * v111);
							a4[v122] = (v132 * v111) + (v134 * v112);
							a3[v127] = (v133 * k) - (v135 * v113);
							a4[v127] = (v133 * v113) + (v135 * k);
							--v120;
						} while (v120);
					}
				}
				result = a1 >> 1;
			}
		}
		v16 *= 2;
	}
	v136 = a1 >> 1;
	for (m = v136; m; m >>= 2)
	{
		result = m >> 1;
		v138 = v136 - result;
		v139 = v136 - m;
		if (v139 < v136 - result)
		{
			result = v138 - v139;
			if (result >= 4)
			{
				v140 = v139 + v136 + 1;
				v141 = (__int64)a3 - (__int64)a4;
				v142 = &a4[v139 + 1];
				v143 = ((v138 - v139 - 4) >> 2) + 1;
				v144 = v143;
				v139 = v139 + 4 * v143;
				do
				{
					v145 = *(float*)((__int64)v142 + v141 - 4);
					v146 = (v140 - 1);
					v147 = *(v142 - 1) - a4[v146];
					v148 = a3[v146] + v145;
					v149 = v145 - a3[v146];
					*(float*)((__int64)v142 + v141 - 4) = v148;
					*(v142 - 1) = a4[v146] + *(v142 - 1);
					a3[v146] = v149;
					a4[v146] = v147;
					v150 = (v140 + 1);
					v151 = *(float*)((__int64)v142 + v141);
					v152 = a3[v140] + v151;
					v153 = *v142 - a4[v140];
					v154 = v151 - a3[v140];
					*(float*)((__int64)v142 + v141) = v152;
					*v142 = a4[v140] + *v142;
					a3[v140] = v154;
					a4[v140] = v153;
					v155 = *(float*)((__int64)v142 + v141 + 4);
					v156 = a3[v150] + v155;
					v157 = v142[1] - a4[v150];
					v158 = v155 - a3[v150];
					*(float*)((__int64)v142 + v141 + 4) = v156;
					v142[1] = v142[1] + a4[v150];
					a3[v150] = v158;
					a4[v150] = v157;
					result = (v140 + 2);
					v140 = (v140 + 4);
					v159 = a3[result];
					v160 = *(float*)((__int64)v142 + v141 + 8) - v159;
					v161 = v142[2] - a4[result];
					*(float*)((__int64)v142 + v141 + 8) = v159 + *(float*)((__int64)v142 + v141 + 8);
					v142[2] = v142[2] + a4[result];
					v142 += 4;
					a3[result] = v160;
					a4[result] = v161;
					--v144;
				} while (v144);
			}
			if (v139 < v138)
			{
				v162 = &a4[v139];
				v163 = (__int64)a3 - (__int64)a4;
				do
				{
					result = v139 + v136;
					v164 = a3[result];
					v165 = *(float*)((__int64)v162 + v163) - v164;
					v166 = *v162 - a4[result];
					v139 = v139 + 1;
					*(float*)((__int64)v162 + v163) = v164 + *(float*)((__int64)v162 + v163);
					*v162 = a4[result] + *v162;
					++v162;
					a3[result] = v165;
					a4[result] = v166;
				} while (v139 < v138);
			}
		}
	}
	return result;
}

float flt_1431292F0[] = {
	1.0, 0.99969882, 0.99879545, 0.99729043, 0.99518472, 0.99247956, 0.98917651,
	0.98527765, 0.98078525, 0.97570211, 0.97003126, 0.96377605, 0.95694035,
	0.94952816, 0.94154406, 0.93299282, 0.9238795, 0.91420972, 0.90398932,
	0.8932243, 0.88192123, 0.87008697, 0.8577286, 0.84485358, 0.8314696,
	0.81758481, 0.80320752, 0.78834641, 0.77301043, 0.75720882, 0.74095112,
	0.7242471, 0.70710677, 0.68954051, 0.67155892, 0.65317279, 0.63439327,
	0.61523157, 0.59569931, 0.57580817, 0.55557019, 0.53499764, 0.5141027,
	0.4928982, 0.47139665, 0.44961131, 0.42755511, 0.40524128, 0.38268343,
	0.35989496, 0.33688983, 0.31368166, 0.29028463, 0.26671275, 0.24298012,
	0.21910122, 0.19509023, 0.17096186, 0.1467305, 0.12241063, 0.098017134,
	0.073564492, 0.04906765, 0.024541136, -4.3699998e-8, -0.024541223,
	-0.049067739, -0.073564574, -0.098017223, -0.12241071, -0.14673057,
	-0.17096195, -0.19509032, -0.21910131, -0.2429802, -0.26671284, -0.29028472,
	-0.31368172, -0.33688992, -0.35989505, -0.38268352, -0.40524134, -0.42755508,
	-0.44961137, -0.47139683, -0.49289817, -0.51410276, -0.5349977, -0.55557036,
	-0.57580817, -0.59569937, -0.61523169, -0.63439327, -0.65317285, -0.67155904,
	-0.68954068, -0.70710677, -0.72424716, -0.74095124, -0.75720882, -0.77301049,
	-0.78834647, -0.80320764, -0.81758481, -0.83146966, -0.84485364, -0.8577286,
	-0.87008703, -0.88192135, -0.8932243, -0.90398932, -0.91420978, -0.92387962,
	-0.93299282, -0.94154412, -0.94952822, -0.95694035, -0.96377605, -0.97003126,
	-0.97570217, -0.98078531, -0.98527765, -0.98917651, -0.9924795, -0.99518472,
	-0.99729049, -0.99879545, -0.99969882, -1.0, -0.99969882, -0.99879545,
	-0.99729043, -0.99518472, -0.9924795, -0.98917651, -0.98527765, -0.98078525,
	-0.97570211, -0.97003126, -0.96377605, -0.95694029, -0.94952816, -0.94154406,
	-0.93299276, -0.9238795, -0.91420972, -0.90398926, -0.89322418, -0.88192123,
	-0.87008691, -0.85772854, -0.84485358, -0.83146954, -0.81758469, -0.80320752,
	-0.78834641, -0.77301037, -0.7572087, -0.74095112, -0.72424704, -0.70710665,
	-0.68954057, -0.67155892, -0.65317291, -0.63439333, -0.61523157, -0.59569919,
	-0.57580805, -0.55557001, -0.53499734, -0.51410282, -0.4928982, -0.47139668,
	-0.44961122, -0.42755494, -0.40524107, -0.38268313, -0.35989511, -0.33688986,
	-0.31368169, -0.29028454, -0.26671258, -0.24297991, -0.21910091, -0.19509038,
	-0.17096189, -0.14673041, -0.12241054, -0.098016933, -0.073564284,
	-0.049067326, -0.024541287, 1.19e-8, 0.024541309, 0.049067825, 0.073564783,
	0.098017432, 0.12241104, 0.14673042, 0.17096192, 0.19509041, 0.2191014,
	0.24298041, 0.26671305, 0.29028502, 0.31368169, 0.33688989, 0.35989514,
	0.3826836, 0.40524155, 0.42755538, 0.44961166, 0.47139671, 0.49289823,
	0.51410282, 0.53499776, 0.55557042, 0.57580847, 0.59569925, 0.61523157,
	0.63439333, 0.65317291, 0.6715591, 0.68954074, 0.70710701, 0.72424704,
	0.74095112, 0.75720888, 0.77301055, 0.78834653, 0.8032077, 0.81758499,
	0.8314696, 0.84485358, 0.85772866, 0.87008709, 0.88192135, 0.89322442,
	0.90398943, 0.91420972, 0.92387956, 0.93299282, 0.94154412, 0.94952828,
	0.95694041, 0.96377617, 0.97003126, 0.97570211, 0.98078531, 0.98527765,
	0.98917657, 0.99247956, 0.99518478, 0.99729043, 0.99879545, 0.99969882,
};

float flt_1431296F0[] = {
	0.0, 0.024541229, 0.049067676, 0.073564567, 0.098017141, 0.12241068,
	0.14673047, 0.1709619, 0.19509032, 0.21910124, 0.2429802, 0.26671278,
	0.29028466, 0.31368175, 0.33688986, 0.35989505, 0.38268346, 0.40524134,
	0.42755508, 0.44961134, 0.47139674, 0.49289823, 0.51410276, 0.53499764,
	0.55557024, 0.57580823, 0.59569931, 0.61523163, 0.63439333, 0.65317285,
	0.67155898, 0.68954057, 0.70710677, 0.7242471, 0.74095118, 0.75720888,
	0.77301043, 0.78834641, 0.80320752, 0.81758481, 0.83146966, 0.84485358,
	0.85772866, 0.87008697, 0.88192129, 0.8932243, 0.90398932, 0.91420978,
	0.9238795, 0.93299282, 0.94154406, 0.94952822, 0.95694035, 0.96377605,
	0.97003126, 0.97570211, 0.98078531, 0.98527765, 0.98917651, 0.99247956,
	0.99518472, 0.99729043, 0.99879545, 0.99969882, 1.0, 0.99969882, 0.99879545,
	0.99729043, 0.99518472, 0.9924795, 0.98917651, 0.98527765, 0.98078525,
	0.97570211, 0.97003126, 0.96377605, 0.95694029, 0.94952816, 0.94154406,
	0.93299282, 0.9238795, 0.91420972, 0.90398932, 0.8932243, 0.88192123,
	0.87008703, 0.8577286, 0.84485352, 0.83146954, 0.81758481, 0.80320752,
	0.78834635, 0.77301049, 0.75720882, 0.74095106, 0.72424698, 0.70710677,
	0.68954051, 0.67155886, 0.65317285, 0.63439327, 0.61523151, 0.59569913,
	0.57580817, 0.55557019, 0.53499746, 0.51410276, 0.49289814, 0.47139663,
	0.44961137, 0.42755505, 0.40524122, 0.38268328, 0.35989505, 0.3368898,
	0.3136816, 0.29028472, 0.26671273, 0.24298008, 0.21910107, 0.19509031,
	0.17096181, 0.14673033, 0.1224107, 0.098017097, 0.073564447, 0.049067486,
	0.02454121, -8.7399997e-8, -0.024541385, -0.049067661, -0.073564619,
	-0.098017268, -0.12241087, -0.1467305, -0.17096199, -0.19509049, -0.21910124,
	-0.24298024, -0.2667129, -0.29028487, -0.31368178, -0.33688995, -0.3598952,
	-0.38268343, -0.4052414, -0.42755523, -0.44961151, -0.47139677, -0.49289829,
	-0.51410288, -0.53499764, -0.5555703, -0.57580835, -0.59569931, -0.61523163,
	-0.63439339, -0.65317297, -0.67155898, -0.68954062, -0.70710689, -0.7242471,
	-0.74095118, -0.75720876, -0.77301043, -0.78834647, -0.80320758, -0.81758493,
	-0.83146977, -0.84485376, -0.85772854, -0.87008697, -0.88192129, -0.89322436,
	-0.90398937, -0.91420984, -0.92387968, -0.93299276, -0.94154406, -0.94952822,
	-0.95694035, -0.96377611, -0.97003132, -0.97570223, -0.98078525, -0.98527765,
	-0.98917651, -0.99247956, -0.99518472, -0.99729049, -0.99879545, -0.99969882,
	-1.0, -0.99969882, -0.99879545, -0.99729043, -0.99518472, -0.9924795,
	-0.98917651, -0.98527765, -0.98078525, -0.97570211, -0.9700312, -0.96377599,
	-0.95694023, -0.94952822, -0.94154406, -0.93299276, -0.92387944, -0.91420966,
	-0.90398914, -0.89322412, -0.88192129, -0.87008697, -0.85772854, -0.84485346,
	-0.83146948, -0.81758463, -0.80320758, -0.78834641, -0.77301043, -0.75720876,
	-0.740951, -0.72424692, -0.70710653, -0.68954062, -0.67155898, -0.65317279,
	-0.63439316, -0.61523145, -0.59569907, -0.57580793, -0.5555703, -0.53499764,
	-0.5141027, -0.49289808, -0.47139654, -0.44961107, -0.42755479, -0.40524137,
	-0.38268343, -0.35989496, -0.33688971, -0.31368154, -0.2902844, -0.2667124,
	-0.24298023, -0.21910122, -0.19509023, -0.17096172, -0.14673024, -0.12241037,
	-0.098016769, -0.073564596, -0.049067639, -0.024541123,
};

float flt_143129AF0[] = {
	0.9999997, 0.99997616, 0.999915, 0.99981618, 0.99967968, 0.99950558,
	0.99929386, 0.99904448, 0.99875754, 0.99843293, 0.99807078, 0.99767107,
	0.99723375, 0.99675888, 0.99624652, 0.9956966, 0.99510926, 0.99448442,
	0.99382216, 0.99312246, 0.99238533, 0.99161088, 0.99079913, 0.98995006,
	0.98906368, 0.98814011, 0.98717928, 0.98618132, 0.98514622, 0.98407406,
	0.98296481, 0.98181856, 0.98063534, 0.97941524, 0.97815824, 0.9768644,
	0.97553378, 0.97416645, 0.97276247, 0.97132182, 0.96984458, 0.96833086,
	0.96678072, 0.96519411, 0.96357119, 0.96191204, 0.96021664, 0.95848507,
	0.95671743, 0.95491374, 0.9530741, 0.95119864, 0.9492873, 0.94734025,
	0.94535756, 0.94333923, 0.94128537, 0.93919611, 0.9370715, 0.93491161,
	0.93271649, 0.93048626, 0.92822099, 0.92592078, 0.92358571, 0.92121589,
	0.91881138, 0.9163723, 0.91389865, 0.91139066, 0.90884835, 0.90627176,
	0.90366107, 0.90101641, 0.89833778, 0.89562535, 0.89287919, 0.89009941,
	0.88728613, 0.88443941, 0.88155943, 0.87864625, 0.8757, 0.87272078,
	0.86970866, 0.86666387, 0.86358637, 0.86047643, 0.85733402, 0.85415941,
	0.85095257, 0.84771371, 0.84444296, 0.84114039, 0.83780617, 0.83444041,
	0.83104324, 0.82761478, 0.82415515, 0.82066447, 0.8171429, 0.81359059,
	0.81000769, 0.80639422, 0.80275041, 0.79907632, 0.79537225, 0.7916382,
	0.78787428, 0.7840808, 0.78025776, 0.77640527, 0.77252364, 0.76861292,
	0.76467323, 0.76070476, 0.75670767, 0.75268203, 0.74862808, 0.74454594,
	0.74043584, 0.73629779, 0.73213202, 0.72793871, 0.72371799, 0.71947002,
	0.71519494, 0.71089298, 0.70656419, 0.70220888, 0.6978271, 0.69341904,
	0.68898481, 0.68452471, 0.68003887, 0.67552733, 0.67099041, 0.66642827,
	0.66184098, 0.65722877, 0.65259188, 0.64793038, 0.64324445, 0.63853431,
	0.63380021, 0.62904215, 0.62426049, 0.61945528, 0.61462677, 0.60977507,
	0.60490042, 0.60000306, 0.59508306, 0.59014064, 0.58517605, 0.58018941,
	0.57518089, 0.57015073, 0.56509918, 0.56002629, 0.5549323, 0.5498175,
	0.54468191, 0.53952587, 0.5343495, 0.52915293, 0.52393651, 0.51870036,
	0.51344466, 0.50816965, 0.50287557, 0.4975625, 0.49223068, 0.48688033,
	0.48151165, 0.47612482, 0.47072011, 0.46529773, 0.45985776, 0.45440048,
	0.44892606, 0.44343477, 0.43792677, 0.43240228, 0.42686164, 0.42130479,
	0.41573209, 0.41014373, 0.40453994, 0.39892092, 0.39328688, 0.38763815,
	0.3819747, 0.37629688, 0.3706049, 0.36489895, 0.35917926, 0.35344607,
	0.34769964, 0.34194005, 0.33616757, 0.33038244, 0.32458487, 0.31877509,
	0.31295338, 0.30711982, 0.30127469, 0.2954182, 0.28955057, 0.28367206,
	0.27778289, 0.27188337, 0.26597348, 0.26005358, 0.2541239, 0.24818464,
	0.24223605, 0.23627833, 0.23031183, 0.22433653, 0.21835281, 0.21236086,
	0.20636091, 0.20035319, 0.19433793, 0.18831547, 0.1822858, 0.17624927,
	0.1702061, 0.16415653, 0.15810078, 0.15203907, 0.14597176, 0.13989884,
	0.13382064, 0.1277374, 0.12164936, 0.11555674, 0.10945977, 0.10335879,
	0.097253807, 0.091145165, 0.085033081, 0.078917801, 0.072799556, 0.066678561,
	0.060555179, 0.054429397, 0.048301566, 0.042171918, 0.036040682, 0.029908087,
	0.023774367, 0.01763987, 0.011504591, 0.0053688786,
};
float flt_143129EF0[] = {
	-0.00076699042, -0.0069028586, -0.013038468, -0.019173585, -0.025307981,
	-0.031441424, -0.037573684, -0.043704528, -0.049833726, -0.05596105,
	-0.062086266, -0.068209141, -0.074329458, -0.080446973, -0.086561449,
	-0.092672676, -0.098780416, -0.10488442, -0.1109845, -0.11708038,
	-0.12317186, -0.12925872, -0.13534068, -0.14141756, -0.14748912, -0.15355512,
	-0.15961535, -0.16566958, -0.17171754, -0.17775905, -0.18379387, -0.18982176,
	-0.19584252, -0.20185591, -0.20786169, -0.21385963, -0.21984953, -0.22583117,
	-0.23180428, -0.23776868, -0.24372412, -0.24967039, -0.25560728, -0.26153448,
	-0.26745188, -0.27335921, -0.27925625, -0.28514278, -0.29101855, -0.2968834,
	-0.30273706, -0.3085793, -0.31440994, -0.32022873, -0.3260355, -0.33182994,
	-0.33761194, -0.3433812, -0.34913751, -0.35488072, -0.36061054, -0.36632681,
	-0.37202924, -0.3777177, -0.38339195, -0.38905174, -0.39469689, -0.40032718,
	-0.40594241, -0.41154233, -0.41712674, -0.42269552, -0.42824832, -0.43378502,
	-0.43930539, -0.44480923, -0.45029631, -0.45576641, -0.4612194, -0.46665499,
	-0.47207305, -0.47747329, -0.48285556, -0.48821968, -0.49356541, -0.49889252,
	-0.50420088, -0.50949031, -0.51476049, -0.52001131, -0.52524251, -0.53045398,
	-0.53564543, -0.54081678, -0.54596776, -0.55109817, -0.55620778, -0.56129652,
	-0.56636411, -0.57141036, -0.57643509, -0.58143818, -0.58641928, -0.59137839,
	-0.59631521, -0.60122955, -0.60612124, -0.61099017, -0.61583608, -0.62065876,
	-0.62545812, -0.63023394, -0.63498604, -0.63971418, -0.64441824, -0.6490981,
	-0.6537534, -0.6583842, -0.66299021, -0.66757119, -0.67212707, -0.67665768,
	-0.68116277, -0.68564218, -0.69009584, -0.69452351, -0.69892502, -0.70330018,
	-0.70764893, -0.71197104, -0.71626627, -0.72053456, -0.72477579, -0.72898966,
	-0.73317605, -0.73733491, -0.74146605, -0.74556917, -0.74964428, -0.75369114,
	-0.75770962, -0.76169956, -0.76566088, -0.76959336, -0.77349681, -0.77737117,
	-0.78121626, -0.78503191, -0.78881806, -0.79257452, -0.79630113, -0.79999769,
	-0.80366421, -0.80730045, -0.81090623, -0.81448156, -0.81802624, -0.82154006,
	-0.825023, -0.82847482, -0.83189553, -0.83528483, -0.83864272, -0.84196901,
	-0.84526366, -0.84852648, -0.85175729, -0.85495609, -0.85812271, -0.86125702,
	-0.86435878, -0.86742812, -0.8704648, -0.8734687, -0.87643969, -0.87937772,
	-0.88228261, -0.88515425, -0.88799256, -0.8907975, -0.89356887, -0.89630663,
	-0.89901066, -0.90168083, -0.90431696, -0.90691912, -0.90948713, -0.91202086,
	-0.91452032, -0.91698533, -0.91941583, -0.92181164, -0.92417276, -0.92649913,
	-0.92879063, -0.93104714, -0.93326861, -0.93545491, -0.93760598, -0.93972176,
	-0.9418022, -0.94384718, -0.94585657, -0.94783038, -0.94976848, -0.95167089,
	-0.9535374, -0.95536804, -0.95716274, -0.95892137, -0.96064389, -0.96233022,
	-0.96398038, -0.96559417, -0.96717167, -0.96871275, -0.97021735, -0.97168541,
	-0.97311687, -0.97451174, -0.97586989, -0.97719133, -0.97847593, -0.97972375,
	-0.98093462, -0.98210859, -0.98324561, -0.98434556, -0.98540848, -0.98643428,
	-0.987423, -0.98837447, -0.98928875, -0.99016583, -0.99100554, -0.991808,
	-0.99257314, -0.99330086, -0.99399126, -0.99464417, -0.99525958, -0.99583763,
	-0.99637812, -0.99688113, -0.99734658, -0.99777448, -0.99816483, -0.99851763,
	-0.99883282, -0.99911034, -0.99935031, -0.99955267, -0.99971735, -0.99984443,
	-0.99993384, -0.99998558,
};

__m128 xmmword_14339B660{ 0.001953125, 0.001953125, 0.001953125, 0.001953125 };

void sub_1427488F0(__int64 a1, float* in_p, float* out_p, __int64 a4, float* a5)
{
	__int64 v5; // r14
	float* v7; // rcx
	__int64 v8; // r9
	float* v9; // rdi
	float* v10; // r8
	float v11; // eax
	float* v12; // rsi
	__int64 v13; // rdx
	__int64 v16; // r8
	float v17; // xmm0_4
	__int64 v18; // rax
	__m128 v19; // xmm0
	__m128 v20; // xmm0
	__m128 v21; // xmm0
	__m128 v22; // xmm0
	float* v23; // rdx
	__int64 v24; // r8
	float* v25; // rcx
	__int64 v26; // r9
	float v27; // xmm0_4
	float* v28; // rcx
	float v29; // eax
	float v30; // xmm0_4
	float* v31; // rcx
	float v32; // rax

	std::span<float> a5_s(a5, 512);
	std::span<float> a5_256_s(a5 + 256, 512);
	std::span<float> a5_511_s(a5 + 511, 512);

	std::span<float> in_s(in_p, 512);


	v5 = 64LL;
	v7 = a5;
	v8 = 64LL;
	v9 = a5 + 511;
	v10 = a5 + 511;
	do
	{
		v10 -= 4;
		*v7 = *in_p;
		v7 += 4;
		v11 = *(in_p + 1);
		in_p += 8;
		*(v10 + 4) = v11;
		*(v7 - 3) = *(in_p - 6);
		v10[3] = *(in_p - 5);
		*(v7 - 2) = *(in_p - 4);
		v10[2] = *(in_p - 3);
		*(v7 - 1) = *(in_p - 2);
		v10[1] = *(in_p - 1);
		--v8;
	} while (v8);
	v12 = a5 + 256;
	sub_14273E860(0x100u, a5, a5 + 256, flt_143129AF0, flt_143129EF0);
	sub_142746230(0x100u, 0, a5, (a5 + 256), flt_1431292F0, flt_1431296F0);
	sub_14273E860(0x100u, a5, a5 + 256, flt_143129AF0, flt_143129EF0);

	if (a5 > a5 + 511 || a5 + 255 < v12)
	{
		__m128* v14 = (__m128*)(a5 + 256);
		__m128* v15 = (__m128*)a5;
		v18 = 16LL;
		do
		{
			v14 += 4;
			v19 = *(__m128*)v15;
			v15 += 4;
			v15[-4] = _mm_mul_ps(v19, xmmword_14339B660);
			v20 = _mm_mul_ps(v15[-3], xmmword_14339B660);
			v14[-4] = _mm_mul_ps(xmmword_14339B660, v14[-4]);
			v15[-3] = v20;
			v21 = _mm_mul_ps(v15[-2], xmmword_14339B660);
			v14[-3] = _mm_mul_ps(xmmword_14339B660, v14[-3]);
			v15[-2] = v21;
			v22 = _mm_mul_ps(v15[-1], xmmword_14339B660);
			v14[-2] = _mm_mul_ps(xmmword_14339B660, v14[-2]);
			v15[-1] = v22;
			v14[-1] = _mm_mul_ps(xmmword_14339B660, v14[-1]);
			--v18;
		} while (v18);
	}
	else
	{
		float* v14 = a5 + 256;
		float* v15 = a5;
		v16 = 64LL;
		do
		{
			v14 += 4;
			v17 = *v15 * 0.001953125;
			v15 += 4;
			*(v15 - 4) = v17;
			*(v14 - 4) = *(v14 - 4) * 0.001953125;
			*(v14 - 259) = *(v14 - 259) * 0.001953125;
			*(v14 - 3) = *(v14 - 3) * 0.001953125;
			*(v14 - 258) = *(v14 - 258) * 0.001953125;
			*(v14 - 2) = *(v14 - 2) * 0.001953125;
			*(v14 - 257) = *(v14 - 257) * 0.001953125;
			*(v14 - 1) = *(v14 - 1) * 0.001953125;
			--v16;
		} while (v16);
	}

	std::span<float> out_s(out_p, 512);

	v23 = a5 + 128;
	v24 = 4LL;
	v25 = a5 + 383;
	v26 = 4LL;
	do
	{
		*out_p = *v23;
		out_p[1] = -*v25;
		out_p[2] = v23[1];
		out_p[3] = -*(v25 - 1);
		out_p[4] = v23[2];
		out_p[5] = -*(v25 - 2);
		out_p[6] = v23[3];
		out_p[7] = -*(v25 - 3);
		out_p[8] = v23[4];
		out_p[9] = -*(v25 - 4);
		out_p[10] = v23[5];
		out_p[11] = -*(v25 - 5);
		out_p[12] = v23[6];
		out_p[13] = -*(v25 - 6);
		out_p[14] = v23[7];
		out_p[15] = -*(v25 - 7);
		out_p[16] = v23[8];
		out_p[17] = -*(v25 - 8);
		out_p[18] = v23[9];
		out_p[19] = -*(v25 - 9);
		out_p[20] = v23[10];
		out_p[21] = -*(v25 - 10);
		out_p[22] = v23[11];
		out_p[23] = -*(v25 - 11);
		out_p[24] = v23[12];
		out_p[25] = -*(v25 - 12);
		out_p[26] = v23[13];
		out_p[27] = -*(v25 - 13);
		out_p[28] = v23[14];
		out_p[29] = -*(v25 - 14);
		out_p[30] = v23[15];
		out_p[31] = -*(v25 - 15);
		out_p[32] = v23[16];
		v27 = *(v25 - 16);
		v25 -= 32;
		out_p[33] = -v27;
		out_p[34] = v23[17];
		out_p[35] = -v25[15];
		out_p[36] = v23[18];
		out_p[37] = -v25[14];
		out_p[38] = v23[19];
		out_p[39] = -v25[13];
		out_p[40] = v23[20];
		out_p[41] = -v25[12];
		out_p[42] = v23[21];
		out_p[43] = -v25[11];
		out_p[44] = v23[22];
		out_p[45] = -v25[10];
		out_p[46] = v23[23];
		out_p[47] = -v25[9];
		out_p[48] = v23[24];
		out_p[49] = -v25[8];
		out_p[50] = v23[25];
		out_p[51] = -v25[7];
		out_p[52] = v23[26];
		out_p[53] = -v25[6];
		out_p[54] = v23[27];
		out_p[55] = -v25[5];
		out_p[56] = v23[28];
		out_p[57] = -v25[4];
		out_p[58] = v23[29];
		out_p[59] = -v25[3];
		out_p[60] = v23[30];
		out_p[61] = -v25[2];
		out_p[62] = v23[31];
		out_p[63] = -v25[1];
		out_p += 64;
		v23 += 32;
		--v26;
	} while (v26);
	v28 = a5 + 255;
	do
	{
		v29 = *v12;
		v12 += 4;
		*out_p = v29;
		v30 = *v28;
		v28 -= 4;
		out_p[1] = -v30;
		out_p[2] = *(v12 - 3);
		out_p[3] = -v28[3];
		out_p[4] = *(v12 - 2);
		out_p[5] = -v28[2];
		out_p[6] = *(v12 - 1);
		out_p[7] = -v28[1];
		out_p += 8;
		--v5;
	} while (v5);
	v31 = a5 + 2;
	do
	{
		*out_p = -*(v31 - 2);
		out_p[1] = *v9;
		out_p[2] = -*(v31 - 1);
		out_p[3] = *(v9 - 1);
		out_p[4] = -*v31;
		out_p[5] = *(v9 - 2);
		out_p[6] = -v31[1];
		out_p[7] = *(v9 - 3);
		out_p[8] = -v31[2];
		out_p[9] = *(v9 - 4);
		out_p[10] = -v31[3];
		out_p[11] = *(v9 - 5);
		out_p[12] = -v31[4];
		out_p[13] = *(v9 - 6);
		out_p[14] = -v31[5];
		out_p[15] = *(v9 - 7);
		out_p[16] = -v31[6];
		out_p[17] = *(v9 - 8);
		out_p[18] = -v31[7];
		out_p[19] = *(v9 - 9);
		out_p[20] = -v31[8];
		out_p[21] = *(v9 - 10);
		out_p[22] = -v31[9];
		out_p[23] = *(v9 - 11);
		out_p[24] = -v31[10];
		out_p[25] = *(v9 - 12);
		out_p[26] = -v31[11];
		out_p[27] = *(v9 - 13);
		out_p[28] = -v31[12];
		out_p[29] = *(v9 - 14);
		out_p[30] = -v31[13];
		out_p[31] = *(v9 - 15);
		v9 -= 32;
		out_p[32] = -v31[14];
		out_p += 64;
		*(out_p - 31) = v9[16];
		*(out_p - 30) = -v31[15];
		*(out_p - 29) = v9[15];
		*(out_p - 28) = -v31[16];
		*(out_p - 27) = v9[14];
		*(out_p - 26) = -v31[17];
		*(out_p - 25) = v9[13];
		*(out_p - 24) = -v31[18];
		*(out_p - 23) = v9[12];
		*(out_p - 22) = -v31[19];
		*(out_p - 21) = v9[11];
		*(out_p - 20) = -v31[20];
		*(out_p - 19) = v9[10];
		*(out_p - 18) = -v31[21];
		*(out_p - 17) = v9[9];
		*(out_p - 16) = -v31[22];
		*(out_p - 15) = v9[8];
		*(out_p - 14) = -v31[23];
		*(out_p - 13) = v9[7];
		*(out_p - 12) = -v31[24];
		*(out_p - 11) = v9[6];
		*(out_p - 10) = -v31[25];
		*(out_p - 9) = v9[5];
		*(out_p - 8) = -v31[26];
		*(out_p - 7) = v9[4];
		*(out_p - 6) = -v31[27];
		*(out_p - 5) = v9[3];
		*(out_p - 4) = -v31[28];
		*(out_p - 3) = v9[2];
		*(out_p - 2) = -v31[29];
		*(out_p - 1) = v9[1];
		v31 += 32;
		--v24;
	} while (v24);
}

float flt_1431286E0[] = {
	0.00041374451, 0.00063187029, 0.00083242479, 0.0010303947, 0.0012312527,
	0.0014377162, 0.0016513923, 0.001873354, 0.0021043862, 0.0023451056,
	0.0025960256, 0.0028575913, 0.0031302026, 0.0034142293, 0.003710018,
	0.0040178993, 0.0043381932, 0.00467121, 0.0050172545, 0.0053766258,
	0.00574962, 0.0061365301, 0.0065376465, 0.0069532581, 0.007383653,
	0.0078291167, 0.008289936, 0.0087663941, 0.0092587769, 0.0097673666,
	0.010292448, 0.010834301, 0.01139321, 0.011969455, 0.012563316, 0.013175075,
	0.01380501, 0.0144534, 0.015120523, 0.015806656, 0.016512074, 0.017237054,
	0.017981868, 0.018746791, 0.019532094, 0.020338045, 0.021164915, 0.022012968,
	0.022882473, 0.023773693, 0.02468689, 0.025622323, 0.026580252, 0.027560933,
	0.028564619, 0.02959156, 0.030642008, 0.031716209, 0.032814406, 0.033936843,
	0.035083756, 0.036255382, 0.037451953, 0.038673703, 0.039920855, 0.041193634,
	0.042492259, 0.043816946, 0.045167912, 0.046545364, 0.047949508, 0.049380545,
	0.050838675, 0.05232409, 0.053836983, 0.055377539, 0.056945939, 0.058542356,
	0.06016697, 0.061819945, 0.063501447, 0.065211624, 0.066950649, 0.068718657,
	0.070515797, 0.07234221, 0.074198022, 0.07608337, 0.07799837, 0.07994315,
	0.081917815, 0.083922468, 0.085957222, 0.088022165, 0.090117387, 0.092242986,
	0.094399013, 0.096585557, 0.098802686, 0.10105046, 0.10332893, 0.10563815,
	0.10797815, 0.11034897, 0.11275065, 0.1151832, 0.11764663, 0.12014097,
	0.12266621, 0.12522236, 0.12780938, 0.13042729, 0.13307604, 0.13575561,
	0.13846597, 0.14120705, 0.14397883, 0.14678125, 0.14961423, 0.15247771,
	0.15537159, 0.15829581, 0.16125028, 0.16423489, 0.16724953, 0.17029409,
	0.17336844, 0.17647249, 0.17960605, 0.18276905, 0.18596126, 0.18918259,
	0.19243285, 0.19571187, 0.19901948, 0.2023555, 0.20571974, 0.20911199,
	0.21253204, 0.21597971, 0.21945477, 0.22295699, 0.22648615, 0.23004198,
	0.23362428, 0.23723276, 0.2408672, 0.2445273, 0.24821278, 0.25192341,
	0.25565886, 0.25941887, 0.26320317, 0.26701137, 0.27084324, 0.27469841,
	0.27857658, 0.28247747, 0.28640065, 0.29034585, 0.29431269, 0.29830083,
	0.30230993, 0.30633962, 0.31038952, 0.31445926, 0.31854844, 0.32265672,
	0.32678369, 0.33092892, 0.33509207, 0.33927271, 0.34347042, 0.3476848,
	0.35191545, 0.35616189, 0.36042371, 0.36470053, 0.36899185, 0.37329727,
	0.37761635, 0.38194862, 0.38629359, 0.3906509, 0.39502001, 0.3994005,
	0.4037919, 0.40819371, 0.41260549, 0.41702676, 0.42145702, 0.42589581,
	0.43034267, 0.43479711, 0.43925858, 0.44372663, 0.44820082, 0.45268059,
	0.45716542, 0.4616549, 0.4661485, 0.47064567, 0.47514597, 0.47964889,
	0.4841539, 0.48866051, 0.49316826, 0.49767655, 0.50218499, 0.50669295,
	0.51120001, 0.5157057, 0.52020943, 0.52471071, 0.52920908, 0.53370398,
	0.53819495, 0.54268152, 0.54716307, 0.5516392, 0.55610937, 0.56057316,
	0.56502998, 0.56947935, 0.57392085, 0.57835394, 0.5827781, 0.58719289,
	0.59159786, 0.59599245, 0.60037625, 0.60474873, 0.6091094, 0.61345792,
	0.61779374, 0.62211639, 0.62642545, 0.63072038, 0.63500077, 0.63926625,
	0.6435163, 0.64775056, 0.65196848, 0.65616965, 0.66035372, 0.66452026,
	0.66866881, 0.67279899, 0.67691034, 0.6810025, 0.6850751, 0.68912768,
	0.69315994, 0.69717139, 0.7011618, 0.70513064, 0.70907766, 0.71300244,
	0.7169047, 0.72078407, 0.72464013, 0.72847265, 0.73228133, 0.73606575,
	0.73982555, 0.74356061, 0.74727046, 0.75095487, 0.75461364, 0.7582463,
	0.76185274, 0.76543266, 0.76898569, 0.77251172, 0.77601039, 0.77948159,
	0.78292501, 0.78634042, 0.78972763, 0.79308641, 0.79641658, 0.79971796,
	0.80299026, 0.80623347, 0.80944729, 0.81263155, 0.81578618, 0.81891102,
	0.82200587, 0.82507062, 0.82810515, 0.83110934, 0.83408308, 0.83702624,
	0.83993882, 0.84282064, 0.84567159, 0.84849167, 0.85128081, 0.85403895,
	0.85676599, 0.85946196, 0.86212677, 0.86476046, 0.86736292, 0.86993414,
	0.87247425, 0.87498307, 0.87746072, 0.87990719, 0.88232255, 0.88470674,
	0.88705987, 0.88938189, 0.89167297, 0.89393318, 0.89616245, 0.89836091,
	0.90052873, 0.90266585, 0.90477246, 0.90684867, 0.90889448, 0.91091013,
	0.91289562, 0.91485113, 0.91677684, 0.91867274, 0.92053914, 0.9223761,
	0.92418379, 0.92596233, 0.92771196, 0.92943287, 0.93112504, 0.93278885,
	0.9344244, 0.936032, 0.93761164, 0.93916368, 0.94068825, 0.94218558,
	0.94365591, 0.94509935, 0.94651628, 0.94790679, 0.9492712, 0.95060962,
	0.95192248, 0.95320988, 0.95447206, 0.95570934, 0.95692199, 0.95811015,
	0.95927411, 0.96041423, 0.96153063, 0.96262366, 0.96369362, 0.96474063,
	0.96576512, 0.96676731, 0.96774739, 0.96870577, 0.96964264, 0.97055829,
	0.97145301, 0.97232717, 0.97318095, 0.97401464, 0.97482848, 0.97562289,
	0.97639805, 0.97715431, 0.97789192, 0.97861117, 0.97931236, 0.97999579,
	0.98066169, 0.98131043, 0.98194218, 0.98255736, 0.98315614, 0.98373884,
	0.9843058, 0.98485726, 0.98539352, 0.98591483, 0.98642153, 0.9869138,
	0.98739201, 0.98785633, 0.98830712, 0.98874468, 0.98916918, 0.98958093,
	0.98998028, 0.99036741, 0.99074256, 0.99110597, 0.991458, 0.99179888,
	0.99212885, 0.99244815, 0.99275702, 0.9930557, 0.99334443, 0.9936235,
	0.99389309, 0.99415344, 0.99440479, 0.99464744, 0.99488151, 0.99510723,
	0.99532485, 0.9955346, 0.99573666, 0.99593133, 0.99611866, 0.99629897,
	0.99647242, 0.99663919, 0.99679953, 0.99695361, 0.9971016, 0.99724364,
	0.99737996, 0.99751073, 0.99763614, 0.9977563, 0.99787146, 0.99798179,
	0.99808735, 0.99818838, 0.99828494, 0.99837732, 0.99846554, 0.99854976,
	0.99863017, 0.99870688, 0.99878007, 0.99884975, 0.99891615, 0.99897939,
	0.99903959, 0.99909681, 0.99915117, 0.99920285, 0.9992519, 0.99929845,
	0.99934256, 0.9993844, 0.99942398, 0.99946147, 0.99949694, 0.99953043,
	0.99956208, 0.99959201, 0.99962014, 0.99964666, 0.9996717, 0.99969524,
	0.99971735, 0.99973816, 0.99975771, 0.99977601, 0.99979317, 0.99980927,
	0.99982429, 0.99983829, 0.99985141, 0.99986362, 0.99987501, 0.99988562,
	0.99989551, 0.99990469, 0.99991322, 0.99992108, 0.99992836, 0.99993503,
	0.99994129, 0.99994701, 0.99995226, 0.99995708, 0.99996156, 0.99996561,
	0.99996936, 0.9999727, 0.9999758, 0.9999786, 0.99998116, 0.99998349,
	0.99998552, 0.99998742, 0.99998909, 0.99999058, 0.99999189, 0.99999309,
	0.99999416, 0.99999511, 0.99999589, 0.99999666, 0.99999726, 0.99999779,
	0.99999827, 0.99999863, 0.99999899, 0.99999923, 0.99999946, 0.99999964,
	0.99999976, 0.99999988,
};

void ReadFrameInHere(
	char* in_p,                 // rcx
	unsigned int num_frames,    // rdx
	unsigned int num_channels,  // r8
	__int64 out_p,              // r9
	int a5,                     // rsp+0x20
	unsigned int a6,            // rsp+0x28
	__int64 a7,                 // rsp+0x30
	__int64 a8)                 // rsp+0x38
{
	int v9; // r13d MAPDST
	__int64 num_channels_; // r15
	__int64 scratch_buffer; // rbx MAPDST
	int frame_size; // r12d MAPDST
	unsigned int frame_idx; // eax MAPDST
	float* v16; // rbp
	int v17; // esi
	__int64 v18; // r9
	__int64 v19; // rcx
	__int64 v20; // r9
	float* v21; // r9
	__int64 v22; // rcx
	float* v23; // rdx
	unsigned int i; // r8d
	float v25; // xmm0_4
	__int64 v26; // rax
	bool v27; // zf
	__int64 result; // rax
	__int64 in_data_p; // rbp
	__int64 v30; // r12
	unsigned int v31; // esi
	__int64 v32; // r14
	__int64 v33; // r9
	__int64 v34; // rcx
	__int64 v35; // r9
	float* v36; // rbp
	__int64 v37; // rax
	float* v38; // r9
	__int64 v39; // rdx
	__int64 v40; // r8
	unsigned int v41; // r11d
	__int64 v42; // rsi
	__int64 v43; // r14
	__int64 v44; // r10
	__int64 v45; // r13
	__int64 v46; // rdx
	__int64 v47; // r15
	__int64 v48; // rax
	__int64 v49; // rbx
	__int64 v50; // r13
	__int64 v51; // rdi
	float v52; // xmm0_4
	float* v53; // r9
	float v54; // xmm0_4
	float* v55; // r9
	float v56; // xmm0_4
	float* v57; // r9
	float v58; // xmm0_4
	float* v59; // r9
	float v60; // xmm0_4
	float* v61; // r9
	float* v62; // r9
	float v63; // xmm0_4
	__int64 v64; // rcx
	float v65; // xmm0_4
	float* v66; // r9
	float v67; // xmm1_4
	__int64 v70; // [rsp+38h] [rbp-C0h]
	__int64 v71; // [rsp+40h] [rbp-B8h]
	__int64 j; // [rsp+48h] [rbp-B0h]
	__int64 v73; // [rsp+50h] [rbp-A8h]
	__int64 v74; // [rsp+58h] [rbp-A0h]
	__int64 v75; // [rsp+60h] [rbp-98h]
	__int64 v76; // [rsp+68h] [rbp-90h]
	__int64 v77; // [rsp+70h] [rbp-88h]
	__int64 v78; // [rsp+78h] [rbp-80h]
	__int64 v79; // [rsp+80h] [rbp-78h]
	__int64 v80; // [rsp+88h] [rbp-70h]
	__int64 v81; // [rsp+90h] [rbp-68h]
	__int64 v82; // [rsp+98h] [rbp-60h]
	void* Src; // [rsp+A0h] [rbp-58h]
	int v86; // [rsp+100h] [rbp+8h]
	unsigned int v90; // [rsp+120h] [rbp+28h] SPLIT BYREF

	std::span<float> a7_s((float*)a7, 512ll * num_channels * num_frames);
	std::span<float> a81_s((float*)a8, 256);
	std::span<float> a82_s((float*)a8 + 256, 256);

	v9 = a5 + 5;
	num_channels_ = num_channels;
	scratch_buffer = a8 + 0x1000;
	v90 = 0;
	scratch_buffer = a8 + 0x1000;
	frame_size = 0;
	GetFrameSize(v9, &v90, &frame_size);
	frame_size += v90 + 4;

	std::span<float> scratch_s((float*)scratch_buffer, 512);

	if (a6)
	{
		frame_idx = 0;
		for (a6 = 0; frame_idx < num_frames; ++frame_idx)
		{
			if (num_channels_)
			{
				v16 = (float*)(scratch_buffer + 0x800);
				v70 = num_channels_;
				v17 = num_channels_ * frame_idx;
				do
				{
					memset((void*)scratch_buffer, 0, 0x800uLL);
					Read_Ka1aFrame((char*)(in_p + (frame_size * v17)), (float*)scratch_buffer, v90, 0, v9);
					sub_1427488F0(0, (float*)scratch_buffer, (float*)scratch_buffer, 0, (float*)a8);
					v21 = v16;
					v22 = (v17 << 9);
					v23 = (float*)((__int64)v16 + 4 * v22 - 0x7F8 - scratch_buffer + (__int64)a7);
					for (i = 0; i < 0x200; i += 8)
					{
						v23 += 8;
						v21 += 8;
						*(v23 - 10) = flt_1431286E0[511 - i] * *(v21 - 8);
						*(v23 - 9) = flt_1431286E0[510 - i] * *(float*)((__int64)v23 + scratch_buffer + 4 * (511 - v22) - a7 - 32);
						*(v23 - 8) = flt_1431286E0[509 - i] * *(float*)((__int64)v23 + scratch_buffer + 4 * (512 - v22) - a7 - 32);
						*(v23 - 7) = flt_1431286E0[508 - i] * *(float*)((__int64)v23 + scratch_buffer + 4 * (513 - v22) - a7 - 32);
						*(v23 - 6) = flt_1431286E0[507 - i] * *(float*)((__int64)v23 + scratch_buffer + 4 * (514 - v22) - a7 - 32);
						*(v23 - 5) = flt_1431286E0[506 - i] * *(float*)((__int64)v23 + scratch_buffer + 4 * (515 - v22) - a7 - 32);
						v25 = flt_1431286E0[505 - i] * *(float*)((__int64)v23 + scratch_buffer + 4 * (516 - v22) - a7 - 32);
						v26 = 504 - i;
						*(v23 - 4) = v25;
						*(v23 - 3) = flt_1431286E0[v26] * *(float*)((__int64)v23 + scratch_buffer + 4 * (517 - v22) - a7 - 32);
					}
					v16 = (float*)(scratch_buffer + 0x800);
					++v17;
					v27 = v70-- == 1;
				} while (!v27);
				num_channels_ = num_channels;
			}
		}
	}
	result = 0LL;
	v86 = 0;
	in_data_p = (__int64)in_p + num_channels_ * num_frames * frame_size;

	std::span<char> in_s((char*)in_data_p, frame_size * 6);

	for (j = in_data_p; result < num_frames; v86 = result)
	{
		if (num_channels_)
		{
			v30 = num_channels_;
			v71 = num_channels_;
			v31 = num_channels_ * result;
			Src = (void*)(scratch_buffer + 0x800);
			frame_idx = num_channels_ * result;
			v32 = out_p + 4LL * ((num_channels_ * result) << 9);

			std::span<float> out_s((float*)v32, 1024);
			std::span<float> src_s((float*)Src, 512);

			v70 = v32;
			do
			{
				std::span<char> in_frame_s((char*)(in_data_p + frame_size * v31), frame_size);

				memset((void*)scratch_buffer, 0, 0x800uLL);
				Read_Ka1aFrame((char*)(in_data_p + frame_size * v31), (float*)scratch_buffer, v90, 0, v9);
				sub_1427488F0(0, (float*)scratch_buffer, (float*)scratch_buffer, 0, (float*)a8);
				v36 = &flt_1431286E0[1];
				v37 = v31 << 9;
				v38 = (float*)v32;
				v39 = 4 * v37 + 8;
				v77 = scratch_buffer + 4 * (513 - v37) - (__int64)a7;
				v82 = 4 * v37;
				v40 = v39 + (__int64)a7;
				v78 = scratch_buffer + 4 * (514 - v37) - (__int64)a7;
				v41 = 0;
				v42 = scratch_buffer + 4 * (511 - v37) - (__int64)a7;
				v43 = scratch_buffer + 4 * (512 - v37) - (__int64)a7;
				v79 = scratch_buffer + 4 * (515 - v37) - (__int64)a7;
				v80 = scratch_buffer + 4 * (516 - v37) - (__int64)a7;
				v81 = scratch_buffer + 4 * (517 - v37) - (__int64)a7;
				v44 = scratch_buffer - 4 * v37 - (__int64)a7;
				v73 = scratch_buffer + 4 * (2 - v37) - (__int64)a7;
				v74 = scratch_buffer + 4 * (3 - v37) - (__int64)a7;
				v45 = scratch_buffer - v39;
				v46 = v73;
				v75 = scratch_buffer + 4 * (4 - v37) - (__int64)a7;
				v47 = scratch_buffer + 4 * (5 - v37) - (__int64)a7;
				v48 = scratch_buffer + 4 * (510 - v37) - (__int64)a7;
				v49 = v75;
				v50 = v45 - (__int64)a7;
				v76 = v48;
				v51 = v74;

				std::span<float> v32_s(v38, 512);
				std::span<float> v40_s((float*)v40, 512);

				//printf("Out %d ============================================================\n", v31);

				do
				{
					float v = *(v36 - 1) * *(float*)(v40 + v50);
					//printf("scratch[%llx] = %e\n", ((v40 + v50) - scratch_buffer) / 4, v);
					*(float*)(v40 + v50) = v;

					v = flt_1431286E0[511 - v41] * *(float*)(v76 + v40);
					//printf("src[%llx] = %e\n", ((v76 + v40) - (__int64)Src) / 4, v);
					*(float*)(v76 + v40) = v;

					v52 = *v36;

					v = *(float*)(v40 - 8) + *(float*)(v40 + v50);
					//printf("out[%llx] = %e\n\n", ((__int64)v38 - v32) / 4, v);
					*v38 = v;

					v53 = &v38[v30];

					v = v52 * *(float*)(v44 + v40 - 4);
					//printf("scratch[%llx] = %e\n", ((v44 + v40 - 4) - scratch_buffer) / 4, v);
					*(float*)(v44 + v40 - 4) = v;

					v = flt_1431286E0[510 - v41] * *(float*)(v42 + v40);
					//printf("src[%llx] = %e\n", ((v42 + v40) - (__int64)Src) / 4, v);
					*(float*)(v42 + v40) = v;

					v54 = v36[1];

					v = *(float*)(v40 - 4) + *(float*)(v44 + v40 - 4);
					//printf("out[%llx] = %e\n\n", ((__int64)v53 - v32) / 4, v);
					*v53 = v;

					v55 = &v53[v30];

					v = v54 * *(float*)(v44 + v40);
					//printf("scratch[%llx] = %e\n", ((v44 + v40) - scratch_buffer) / 4, v);
					*(float*)(v44 + v40) = v;

					v = flt_1431286E0[509 - v41] * *(float*)(v43 + v40);
					//printf("src[%llx] = %e\n", ((v43 + v40) - (__int64)Src) / 4, v);
					*(float*)(v43 + v40) = v;
					v56 = v36[2];

					v = *(float*)v40 + *(float*)(v44 + v40);
					//printf("out[%llx] = %e\n\n", ((__int64)v55 - v32) / 4, v);
					*v55 = v;

					v57 = &v55[v30];

					v = v56 * *(float*)(v40 + v44 + 4);
					//printf("scratch[%llx] = %e\n", ((v44 + v40 + 4) - scratch_buffer) / 4, v);
					*(float*)(v40 + v44 + 4) = v;

					v = flt_1431286E0[508 - v41] * *(float*)(v77 + v40);
					//printf("src[%llx] = %e\n", ((v77 + v40) - (__int64)Src) / 4, v);
					*(float*)(v77 + v40) = v;

					v58 = v36[3];

					v = *(float*)(v40 + 4) + *(float*)(v40 + v44 + 4);
					//printf("out[%llx] = %e\n\n", ((__int64)v57 - v32) / 4, v);
					*v57 = v;

					v59 = &v57[v30];

					v = v58 * *(float*)(v46 + v40);
					//printf("scratch[%llx] = %e\n", ((v46 + v40) - scratch_buffer) / 4, v);
					*(float*)(v46 + v40) = v;

					v = flt_1431286E0[507 - v41] * *(float*)(v78 + v40);
					//printf("src[%llx] = %e\n", ((v78 + v40) - (__int64)Src) / 4, v);
					*(float*)(v78 + v40) = v;

					v60 = v36[4];

					v = *(float*)(v40 + 8) + *(float*)(v46 + v40);
					//printf("out[%llx] = %e\n\n", ((__int64)v59 - v32) / 4, v);
					*v59 = v;

					v61 = &v59[v30];

					v = v60 * *(float*)(v51 + v40);
					//printf("scratch[%llx] = %e\n", ((v51 + v40) - scratch_buffer) / 4, v);
					*(float*)(v51 + v40) = v;

					v = flt_1431286E0[506 - v41] * *(float*)(v79 + v40);
					//printf("src[%llx] = %e\n", ((v79 + v40) - (__int64)Src) / 4, v);
					*(float*)(v79 + v40) = v;

					v = *(float*)(v40 + 12) + *(float*)(v51 + v40);
					//printf("out[%llx] = %e\n\n", ((__int64)v61 - v32) / 4, v);
					*v61 = v;

					v62 = &v61[v30];

					v = v36[5] * *(float*)(v49 + v40);
					//printf("scratch[%llx] = %e\n", ((v49 + v40) - scratch_buffer) / 4, v);
					*(float*)(v49 + v40) = v;

					v63 = flt_1431286E0[505 - v41];
					v64 = 504 - v41;
					v41 += 8;

					v = v63 * *(float*)(v80 + v40);
					//printf("src[%llx] = %e\n", ((v80 + v40) - (__int64)Src) / 4, v);
					*(float*)(v80 + v40) = v;

					v65 = v36[6];

					v36 += 8;

					v = *(float*)(v40 + 16) + *(float*)(v49 + v40);
					//printf("out[%llx] = %e\n\n", ((__int64)v62 - v32) / 4, v);
					*v62 = v;

					v66 = &v62[v30];

					v = v65 * *(float*)(v47 + v40);
					//printf("scratch[%llx] = %e\n", ((v47 + v40) - scratch_buffer) / 4, v);
					*(float*)(v47 + v40) = v;

					v = flt_1431286E0[v64] * *(float*)(v81 + v40);
					//printf("src[%llx] = %e\n", ((v81 + v40) - (__int64)Src) / 4, v);
					*(float*)(v81 + v40) = v;

					v = *(float*)(v40 + 20) + *(float*)(v47 + v40);

					//printf("out[%llx] = %e\n\n", ((__int64)v66 - v32) / 4, v);
					*v66 = v;

					v38 = &v66[v30];
					v40 += 32LL;
				} while (v41 < 0x200);

				//printf("\n");

				memcpy((void*)((__int64)a7 + v82), Src, 0x800uLL);      // copy final decoded output
				v31 = frame_idx + 1;
				v32 = v70 + 4;
				v27 = v71-- == 1;
				in_data_p = j;
				++frame_idx;
				v70 += 4LL;
			} while (!v27);
			result = v86;
			num_channels_ = num_channels;
		}
		result = result + 1;
	}
}

int main(int argc, char* argv[]) {
	std::vector<std::string> args(argv + 1, argv + argc);
	if (args.size() < 1) {
		printf("Need filename!");
		return -1;
		args.resize(1);
		args[0] = "409_bgm006.ka1a";
	}
	std::filesystem::path in_path{ args[0] };

	std::vector<std::filesystem::path> in_files{};
	if (std::filesystem::is_directory(in_path)) {
		for (auto& entry : std::filesystem::directory_iterator(in_path)) {
			if (!entry.is_regular_file()) {
				continue;
			}

			if (entry.path().extension() == ".ka1a") {
				in_files.push_back(entry.path());
			}
		}
	}
	else {
		in_files.push_back(in_path);
	}

	for (auto& in_file_path : in_files) {
		printf("%s\n", in_file_path.string().c_str());

		auto file_size = std::filesystem::file_size(in_file_path);
		if (file_size <= 0x28) {
			continue;
		}
		std::vector<char> fd{};
		fd.resize(file_size);
		std::ifstream in_file{ in_file_path, std::ios::binary | std::ios::in };
		in_file.read(fd.data(), file_size);
		in_file.close();

		struct KA1A {
			char magic[4];
			unsigned int data_size;
			unsigned int num_channels;
			unsigned int num_frames;
			unsigned int sample_rate;
			unsigned int num_samples;
			unsigned int unk18;
			unsigned int unk1C;
			unsigned int mode;
			unsigned int unk24;
		};

		KA1A hdr = *(KA1A*)fd.data();

		__int64 total_output_size = 0;
		__int64 num_frames = 0;
		__int64 pos = sizeof(KA1A);
		bool decode_first_frame = 0;

		if (std::memcmp(hdr.magic, "KA1A", 4)) {
			hdr.data_size = file_size;
			hdr.num_channels = 1;
			hdr.num_frames = 1;
			hdr.sample_rate = 48000;
			hdr.num_samples = 0x6A004;
			hdr.mode = 0;
			pos = 0;
			decode_first_frame = true;
		}

		//hdr.num_channels = 1;
		//hdr.num_samples = 0x3F583;
		//hdr.mode = -2;

		unsigned int v90 = 0;
		int frame_size = 0;
		GetFrameSize(hdr.mode + 5, &v90, &frame_size);
		frame_size += v90 + 4;

		std::vector<std::vector<char>> outputs(hdr.num_frames);
		for (auto& v : outputs) {
			int sz = hdr.num_samples * hdr.num_channels * sizeof(float);
			sz += (sz * 0.05);
			v.resize(sz, 0);
		}

		std::vector<char> a4{};
		a4.resize(512ll * hdr.num_frames * hdr.num_channels * sizeof(float));
		std::vector<char> a8{};
		a8.resize(0x10000);
		std::vector<char> a9{};
		a9.resize(0x10000);

		std::span a8_s(a8);

		__int64 one_iteration_output_size = 512ll * /*hdr.num_frames **/ hdr.num_channels * sizeof(float);
		__int64 one_iteration_input_size = (__int64)frame_size * hdr.num_frames * hdr.num_channels;

		for (int channel = 0; channel < 1; channel++) {
			//while (pos % 0x10) {
			//	pos += 1;
			//}
			while (pos < hdr.data_size + 0x28) {
				//printf("Frame %lld Pos 0x%llX ptr 0x%llx\n", num_frames, pos, (__int64)fd.data() + pos);

				if (pos + one_iteration_input_size + 0x10 >= fd.size()) {
					break;
				}

				std::span<char> frame_in_s(fd.data() + pos, frame_size * hdr.num_frames * hdr.num_channels);
				std::span<float> a4_out_s((float*)a4.data(), a4.size() / sizeof(float));

				ReadFrameInHere(fd.data() + pos, hdr.num_frames, hdr.num_channels, (__int64)a4.data(), hdr.mode, decode_first_frame, (__int64)a8.data(), (__int64)a9.data());

				for (int stream = 0; stream < hdr.num_frames; stream++) {
					std::memcpy(outputs[stream].data() + total_output_size, a4.data() + one_iteration_output_size * stream, one_iteration_output_size);
				}

				total_output_size += one_iteration_output_size;
				num_frames++;
				pos += one_iteration_input_size;
			}
		}

		printf("\tNum frames %llx Total out size 0x%llX\n", num_frames, total_output_size);

		auto orig_name_no_ext = in_file_path.replace_extension("");

		for (int stream = 0; stream < hdr.num_frames; stream++) {
			std::filesystem::path out_file_path{ orig_name_no_ext };
			//printf("1 Output to %s\n", out_file_path.string().c_str());
			out_file_path = out_file_path.replace_filename(out_file_path.filename().string() + "_" + std::to_string(hdr.num_channels) + "chn_strm" + std::to_string(stream));
			//printf("2 Output to %s\n", out_file_path.string().c_str());
			out_file_path = out_file_path.replace_extension("bin");
			//printf("3 Output to %s\n", out_file_path.string().c_str());
			//return 0;

			std::ofstream out_file{ out_file_path, std::ios::binary | std::ios::out };
			out_file.write(outputs[stream].data(), total_output_size);
			out_file.close();
		}
	}

	return 0;
}